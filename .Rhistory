Age_Year_mean<- Mean.Age = c(27.5,26.81,25.34,24.48,27.87,28.36,28.47,29.93,28.08,29.33,29.44,28.32,29.11,27.36,27.28,27.43,27.73,26.47,25.7,27.05,27.72,28.35,29.04,29.76,29.74,30.55,31.28,31.09)
Age_Year_mean<- Year = c(1900,1904,1906, 1908, 1912, 1920, 1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016)
table(Age.Year.mean)
tapply(Compare_Row_Equest_all$Age, Compare_Row_Equest_all$Year, meanfun)
Mean.Age <- {c(mean = mean(Compare_Row_Equest_all$Age), median=median(Compare_Row_Equest_all$Age))} %% tapply(Compare_Row_Equest_all$Age, Compare_Row_Equest_all$Year)
table(Mean.Age)
#group_by(Compare_Row_Equest_all$Year) %%
#group_vars()
library(plyr)
## test plots to see patterns
library(ggplot2)
ggplot(Top_7_Team, aes(x=Age, y=Sport)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
data(athlete_event_whole)
str(Athlete_event_whole)
str(Athlete_event_whole)
ggplot(Athlete_event_whole, aes(x=Year, y=Age)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)    # Add linear regression line
ggplot(Top_7_Team, aes(x = Year, fill = Age_over_30)) +
geom_bar(position = "dodge")
ggplot(Compare_Row_Equest_all, aes(x=Year, y=Age)) +
geom_point(shape=1) +
geom_smooth(method=lm)
tapply(Compare_Row_Equest_all$Age, Compare_Row_Equest_all$Year, meanfun)
str(Athlete_event_whole)
save(athlete_events, file="athlete_events.RData")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
load(file="athlete_events.RData")
data(athlete_events)
data(Athlete_event_whole)
data(Top_7_Team)
save(Athlete_event_whole, file="athlete_event_whole.RData")
save(Top_7_Team, file="Top_7_Team.RData")
save(Compare_Row_Equest_all, file="Compare_Row_Equest_all.RData")
(meanfun, file = "meanfun.Rdata")
save(meanfun, file ="meanfun.Rdata")
View(Athlete_event_whole)
load(athlete_events)
str(athlete_events)
library(dplyr)
#check which columns have NA
colnames(athlete_events)[colSums(is.na(athlete_events)) > 0]
#Clean up Medal fields with NA
Top_6_Teams <- mutate(athlete_events, Medal = ifelse(is.na(Medal), "No Medal earned", Medal))
#Clean up major country changes of German and Russia to combine
Top_6_Teams <- mutate(Top_6_Teams, Team = ifelse(Team == "Soviet Union", "Russia", Team))
Top_6_Teams <- mutate(Top_6_Teams, Team = ifelse(Team == "East Germany", "Germany", Team))
Top_6_Teams <- mutate(Top_6_Teams, Team = ifelse(Team == "West Germany", "Germany", Team))
#fix age na
Top_6_Teams <- mutate(Top_6_Teams, Age = ifelse(is.na(Age), mean(Age,na.rm = TRUE), Age))
#Keep only rows of top 6 teams
Top_7_Team <- subset(Top_6_Teams, Team == "United States" | Team == "France" | Team == "Italy" | Team =="Great Britain" |
Team == "Germany" | Team == "Russia" | Team == "Japan")
#check for NA in Age
table(Top_7_Team$Age)
table(Top_7_Team$Team)
#fix NA in Age by taking mean
Athlete_event_whole <- mutate(athlete_events, Age = ifelse(is.na(Age), mean(Age,na.rm = TRUE), Age))
Top_7_Team <- mutate(Top_7_Team, Age = ifelse(is.na(Age), mean(Age,na.rm = TRUE), Age))
#create new column to simplify those over / under 30
Top_7_Team$Age_over_30 <- ifelse(Top_7_Team$Age >= 30,'Yes','No')
Compare_Row_Equest_all$Age_over_30 <- ifelse(Compare_Row_Equest_all$Age >= 30,'Yes','No')
str(Top_7_Team)
#build value to medal
Top_7_Team$Medal_value <- ifelse(Top_7_Team$Medal == "Gold", 3, ifelse(Top_7_Team$Medal == "Silver", 2,
ifelse(Top_7_Team$Medal == "Bronze", 1,0)))
#compare rowing vs equestrians if average age has moved up
Compare_Row_Equest <- subset(Top_7_Team, Sport == "Rowing" | Sport == "Equestrianism")
Compare_Row_Equest_all <- subset(Top_6_Teams, Sport == "Rowing" | Sport == "Equestrianism")
table(Compare_Row_Equest$Sport)
table(Compare_Row_Equest_all$Sport)
table(Compare_Row_Equest$Year)
#review the mean age
mean(Top_6_Teams$Age)
mean(Compare_Row_Equest_all$Age)
mean(Compare_Row_Equest_all$Age & Compare_Row_Equest_all$Sport == "Rowing")
mean(Compare_Row_Equest_all$Age & Compare_Row_Equest_all$Sport == "Equestrianism")
#calulate mean per year
#Compare_Row_Equest_all$Year_Age_Mean<- aggregate(Compare_Row_Equest_all[, 4], list(Compare_Row_Equest_all$Year), mean)
#Year_Age_Mean <- aggregate(Compare_Row_Equest_all[, 4:4], list(Compare_Row_Equest_all[, c('Year')]), mean)
#Year_Age_Mean <- names(Compare_Row_Equest_all)[4:4]
#Age.Year.mean <- Compare_Row_Equest_all[,lapply(.SD,mean,na.rm=TRUE),by=Year,.SDcols=Year_Age_Mean]
meanfun <- function(x) {
c(min = min(x), max =max(x),
mean =mean(x), median =median(x),
std = sd(x))}
#meanage <- function(x) {
#  c(agr.YR.Mean$mean = mean(x))
#}
Age.Year.mean <- tapply(Compare_Row_Equest_all$Age, Compare_Row_Equest_all$Year, meanfun)
Age_Year_mean<- Mean.Age = c(27.5,26.81,25.34,24.48,27.87,28.36,28.47,29.93,28.08,29.33,29.44,28.32,29.11,27.36,27.28,27.43,27.73,26.47,25.7,27.05,27.72,28.35,29.04,29.76,29.74,30.55,31.28,31.09)
Age_Year_mean<- Year = c(1900,1904,1906, 1908, 1912, 1920, 1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016)
table(Age.Year.mean)
tapply(Compare_Row_Equest_all$Age, Compare_Row_Equest_all$Year, meanfun)
Mean.Age <- {c(mean = mean(Compare_Row_Equest_all$Age), median=median(Compare_Row_Equest_all$Age))} %% tapply(Compare_Row_Equest_all$Age, Compare_Row_Equest_all$Year)
table(Mean.Age)
#group_by(Compare_Row_Equest_all$Year) %%
#group_vars()
library(plyr)
## test plots to see patterns
library(ggplot2)
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
library(dplyr)
library(ggplot2)
load('athlete_event_whole.RData')
# Which events in your dataset have the highest proportion of participants aged over 30?
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
library(dplyr)
library(ggplot2)
load('athlete_event_whole.RData')
# Which events in your dataset have the highest proportion of participants aged over 30?
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Team) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(NOC) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Team) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(NOC) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Compare_Row_Equest_all %>%
group_by(NOC) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Compare_Row_Equest_all %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Top_7_Team %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Top_7_Team %>%
group_by(NOC) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Top_7_Team %>%
group_by(Team) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
medal != is.na()
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
earn_medal != is.na(Medal)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Medal   = n()
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole <- mutate(athlete_events, Medal = ifelse(is.na(Medal), "No Medal earned", Medal))
# Which events in your dataset have the highest proportion of participants aged over 30 with medals?
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Medal   == "Gold"
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Medal   == Gold
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Medal   = Gold
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Medal   = 'Gold'
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Gold_Medal   = 'Gold',
Silver_Medal = 'Silver'
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Medal   = n('Gold')
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Medal   = n("Gold")
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30),
Medal   = "Gold"
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Medal) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Medal != "No Medal earned") %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Medal) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
Athlete_event_whole %>%
group_by(Medal) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
library(dplyr)
library(ggplot2)
load('athlete_event_whole.RData')
#Athlete_event_whole <- mutate(athlete_events, Medal = ifelse(is.na(Medal), "No Medal earned", Medal))
# Which events in your dataset have the highest proportion of participants aged over 30?
Athlete_event_whole %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
#Which countries have the highest proportion of participants aged over 30?
Athlete_event_whole %>%
group_by(NOC) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
#the highest proportion of participants aged over 30 looking at Rowing and Equestrian
Compare_Row_Equest_all %>%
group_by(Sport) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
#the highest proportion of participants aged over 30 for top 7 countries
Top_7_Team %>%
group_by(Team) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
# Which events in your dataset have the highest proportion of participants aged over 30 with medals?
Athlete_event_whole %>%
group_by(Medal) %>%
summarise(
participants = n(),
over_30      = sum(Age > 30)
) %>%
mutate(
percent_over_30 = over_30/participants*100
) %>%
arrange(desc(percent_over_30))
install.packages(c("cluster", "rattle.data","NbClust"))
data(wine, package="rattle.data")
head(wine)
wine$Type = NULL
scale()
scale(wine)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wssplot(df)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wssplot(df)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wssplot(df)
scale(wine{-1})
scale(wine{-1})
install.packages(c("cluster", "rattle.data","NbClust"))
